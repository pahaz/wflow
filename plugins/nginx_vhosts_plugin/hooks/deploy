#!/usr/bin/env bash
set -eo pipefail; [[ ${TRACE} ]] && set -x

[[ ${PLATFORM_NAME} ]] || PLATFORM_NAME=wflow
[[ ${PLATFORM_PLUGIN_INSTALLER_COMMAND} ]] || PLATFORM_PLUGIN_INSTALLER_COMMAND=wflow-install-plugin
[[ ${PLATFORM_TRIGGER_EVENT_COMMAND} ]] || PLATFORM_TRIGGER_EVENT_COMMAND=wflow-trigger-event

[[ ${PLATFORM_USERNAME} ]] || PLATFORM_USERNAME=wflow

[[ ${PLATFORM_DATA_PATH} ]] || PLATFORM_DATA_PATH=/home/${PLATFORM_NAME}
[[ ${PLATFORM_PLUGINS_PATH} ]] || PLATFORM_PLUGINS_PATH=/var/lib/${PLATFORM_NAME}/plugins

echo "$APP - $PORT"
echo PLATFORM_USERNAME=${PLATFORM_USERNAME}
echo PLATFORM_DATA_PATH=${PLATFORM_DATA_PATH}

WILDCARD_SSL="$PLATFORM_DATA_PATH/tls"
SSL="$PLATFORM_DATA_PATH/$APP/tls"

if [[ -f "$PLATFORM_DATA_PATH/NGINX-VHOST" ]]; then
  VHOST=$(< "$PLATFORM_DATA_PATH/NGINX-VHOST")

  if [[ -f "$PLATFORM_DATA_PATH/$APP/NGINX-VHOST" ]]; then
    hostname=$(< "$PLATFORM_DATA_PATH/$APP/NGINX-VHOST")
  else
    CUSTOM_VHOST=$(< "$PLATFORM_DATA_PATH/NGINX-VHOST")
    SUBDOMAIN=${APP/%\.${VHOST}/}
    if [[ "$APP" == *.* ]] && [[ "$SUBDOMAIN" == "$APP" ]]; then
      hostname="${APP/\//-}"
    else
      hostname="${APP/\//-}.$VHOST"
    fi
  fi

  if [[ -e "$SSL/server.crt" ]] && [[ -e "$SSL/server.key" ]]; then
    SSL_INUSE="$SSL"
    SSL_DIRECTIVES=$(cat <<EOF
  ssl_certificate     ${SSL_INUSE}/server.crt;
  ssl_certificate_key ${SSL_INUSE}/server.key;
EOF
)
  elif  [[ -e "${WILDCARD_SSL}/server.crt" ]] && [[ -e "${WILDCARD_SSL}/server.key" ]] && [[ ${hostname} = `openssl x509 -in ${WILDCARD_SSL}/server.crt -noout -subject | tr '/' '\n' | grep CN= | cut -c4-` ]]; then
    SSL_INUSE="${WILDCARD_SSL}"
    SSL_DIRECTIVES=""
  fi

  # ssl based nginx.conf
  if [[ -n "$SSL_INUSE" ]]; then
    cat<<EOF > ${PLATFORM_DATA_PATH}/${APP}/nginx.conf
upstream ${APP} { server 127.0.0.1:${PORT}; }
server {
  listen      [::]:80;
  listen      80;
  server_name ${hostname};
  return 301 https://\$host\$request_uri;
}

server {
  listen      [::]:443 ssl spdy;
  listen      443 ssl spdy;
  server_name ${hostname};
${SSL_DIRECTIVES}

  keepalive_timeout   70;
  add_header          Alternate-Protocol  443:npn-spdy/2;

  location    / {
    limit_req zone=flood burst=5;
    proxy_pass  http://${APP};
    proxy_http_version 1.1;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host \$http_host;
    proxy_set_header X-Forwarded-Proto \$scheme;
    proxy_set_header X-Forwarded-For \$remote_addr;
    proxy_set_header X-Forwarded-Port \$server_port;
    proxy_set_header X-Request-Start \$msec;
  }
}
EOF

    echo "https://$hostname" > "$PLATFORM_DATA_PATH/$APP/URL"
  else
    # default nginx.conf
    cat<<EOF > ${PLATFORM_DATA_PATH}/${APP}/nginx.conf
upstream ${APP} { server 127.0.0.1:${PORT}; }
server {
  listen      [::]:80;
  listen      80;
  server_name ${hostname};
  location    / {
    limit_req zone=flood burst=5;
    proxy_pass  http://${APP};
    proxy_http_version 1.1;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host \$http_host;
    proxy_set_header X-Forwarded-Proto \$scheme;
    proxy_set_header X-Forwarded-For \$remote_addr;
    proxy_set_header X-Forwarded-Port \$server_port;
    proxy_set_header X-Request-Start \$msec;
  }
}
EOF

    echo "127.0.0.1" > "$PLATFORM_DATA_PATH/$APP/HOST"
    echo "$PORT" > "$PLATFORM_DATA_PATH/$APP/PORT"
    echo "$hostname" > "$PLATFORM_DATA_PATH/$APP/HOSTNAME"
  fi

  echo "       Reloading nginx"
  sudo /etc/init.d/nginx reload > /dev/null
fi
