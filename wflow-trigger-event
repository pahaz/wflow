#!/usr/bin/env python3
# coding=utf-8
from __future__ import unicode_literals, print_function, absolute_import, \
    generators, with_statement, nested_scopes, division
import argparse
import sys

from wshell.module import make_managers_and_load_them_from_plugin_modules
from wutil.env import load_env

__author__ = 'pahaz'
__version__ = '0.2.1'


def detect_type(str_value):
    try:
        v = int(str_value)
    except ValueError:
        try:
            v = float(str_value)
        except ValueError:
            v = str_value

    return v


def main(argv):
    env = load_env(__file__ + '.ini')

    directory_for_storing_plugins = env.SCRIPT_PLUGINS_PATH
    directory_for_storing_data = env.SCRIPT_DATA_PATH
    directory_for_storing_venv = env.SCRIPT_VENV_PATH
    owner_username = env.SCRIPT_USER_NAME

    class StoreNameValuePair(argparse.Action):
        def __call__(self, parser, namespace, values, option_string=None):
            # print(namespace, values)
            dict_ = {}
            for value in values:
                n, v = value.split('=')
                dict_[n] = detect_type(v)
            setattr(namespace, self.dest, dict_)

    parser = argparse.ArgumentParser(description="Trigger event tool")
    parser.add_argument("name", help="event name")
    parser.add_argument("args", nargs="*", action=StoreNameValuePair,
                        help="key=value pair (ex: AAA=\"a a a\" B=2 C=1.2)")
    parsed_args = parser.parse_args(argv)

    command_mngr, event_mngr = make_managers_and_load_them_from_plugin_modules(
        directory_for_storing_plugins,
        directory_for_storing_venv,
        env
    )

    print("Trigger event '{0}' ".format(parsed_args.name),
          ', '.join(map(lambda v: "{0}={1}".format(v[0], v[1]),
                        parsed_args.args.items())))

    results = event_mngr.trigger_event(parsed_args.name, env=env,
                                       **parsed_args.args)
    for result in results:
        f, result = result
        print("Hook {0} return {1}".format(f.__name__, result))
    return 0


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
