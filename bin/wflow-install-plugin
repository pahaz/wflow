#!/usr/bin/env python3
# coding=utf-8
from __future__ import unicode_literals, print_function, absolute_import, \
    generators, with_statement, nested_scopes, division
import os
import sys
import argparse
import shutil

from wutil.fs import set_executable
from wutil.execute import simple_execute
from wutil.env_stack import load_env_stack
from wutil.env_keys import PLATFORM_VENV_PATH_KEY, PLATFORM_PLUGINS_PATH_KEY


__author__ = 'pahaz'
__version__ = '0.2.7'
INSTALL_PLATFORM_FILE_NAME = 'install'
CONFIG_FILENAME = __file__.split('-')[0] + '.ini'


class InstallError(Exception):
    pass


def is_root_access():
    # Windows not support `geteuid`
    return os.geteuid() == 0


def do_install_plugin(env, installed_plugins, new_plugin_path, force_install):
    plugin_path = env[PLATFORM_PLUGINS_PATH_KEY]
    venv_path = env[PLATFORM_VENV_PATH_KEY]

    plugin_name = os.path.basename(new_plugin_path)
    plugin_new_store_path = os.path.join(plugin_path, plugin_name)
    is_plugin_self_dir = os.path.exists(new_plugin_path) and \
                         os.path.exists(plugin_new_store_path) and \
                         os.path.samefile(new_plugin_path,
                                          plugin_new_store_path)
    is_plugin_with_same_name_exists = plugin_name in installed_plugins
    if is_plugin_with_same_name_exists and not force_install:
        sys.stderr.write("warning: plugin `{0}` already installed "
                         "(use `{1} {0} --force` if you want reinstall it)\n"
                         .format(plugin_name, sys.argv[0]))
        return

    # check if is deactivated
    if is_plugin_with_same_name_exists:
        base, name = os.path.split(new_plugin_path)
        deactivated_plugin = os.path.join(base, '.' + name)
        if os.path.exists(deactivated_plugin):
            print("    ----> cleaning: {0}".format(deactivated_plugin))
            shutil.rmtree(deactivated_plugin)

    print("    ----> installing: {0}".format(new_plugin_path))

    install_file = os.path.join(new_plugin_path, INSTALL_PLATFORM_FILE_NAME)
    if os.path.exists(install_file):
        print("    ----> run: {0}".format(install_file))
        set_executable(install_file)

        # Windows problem
        venv_activate_path = os.path.join(venv_path, 'bin', 'activate')
        # TODO: check print stderr info
        # TODO: use execute3
        ret = simple_execute(
            './install',
            env=env,
            init_env_script=venv_activate_path,
            cwd=new_plugin_path)

        if ret != 0:
            raise InstallError("error: install {1} return "
                               "{0} != 0".format(ret, install_file))

    if is_plugin_with_same_name_exists and not is_plugin_self_dir:
        if os.path.exists(plugin_new_store_path):
            print("    ----> cleaning: {0}".format(plugin_new_store_path))
            shutil.rmtree(plugin_new_store_path)

    if not is_plugin_self_dir:
        print("    ----> copy plugin: {0} -> {1}".format(
            new_plugin_path,
            plugin_new_store_path))
        shutil.copytree(new_plugin_path, plugin_new_store_path)

    print("    ----> done")


def parse_args(argv):
    parser = argparse.ArgumentParser(description="Plugin install tool")
    parser.add_argument('-l', '--print-list-installed-plugins',
                        action='store_true')
    parser.add_argument('-f', '--force', action='store_true',
                        help="force install plugins if they exists")
    parser.add_argument('plugins', nargs="*", metavar="plugin",
                        help="plugin directory")

    options = parser.parse_args(argv)
    return options


def main(argv):
    env = load_env_stack(CONFIG_FILENAME)
    platform_plugins_path = env[PLATFORM_PLUGINS_PATH_KEY]
    options = parse_args(argv)

    installed_plugins = []

    new_plugins = options.plugins
    force_install = options.force
    do_print_installed_plugins = options.print_list_installed_plugins

    for new_plugin in os.listdir(platform_plugins_path):
        _path = os.path.normpath(os.path.join(platform_plugins_path,
                                              new_plugin))
        if os.path.isdir(_path):
            if new_plugin.startswith('.'):
                installed_plugins.append(new_plugin[1:])
            else:
                installed_plugins.append(new_plugin)

    if do_print_installed_plugins:
        print("INSTALLED PLUGINS")
        y = [x for x in os.listdir(platform_plugins_path)
             if not x.startswith('.')]
        n = [x[1:] for x in os.listdir(platform_plugins_path)
             if x.startswith('.')]
        print("ACTIVATED: " + ', '.join(y))
        print('DEACTIVATED: ' + ', '.join(n))
        return 0

    if not new_plugins:
        sys.stderr.write("error: no plugins for installing\n")
        return 2

    if not is_root_access():
        sys.stderr.write("error: installing required root access "
                         "(use: `sudo {0}`)\n"
                         .format(' '.join(sys.argv[:])))
        return 4

    for new_plugin in new_plugins:
        new_plugin_path = os.path.normpath(new_plugin)
        base, name = os.path.split(new_plugin_path)
        if not os.path.exists(new_plugin_path):
            sys.stderr.write("warning: plugin {0} not exists (skip)\n"
                             .format(new_plugin_path))
            continue
        if not os.path.isdir(new_plugin_path):
            sys.stderr.write("warning: path {0} is not a directory (skip)\n"
                             .format(new_plugin_path))
            continue
        if name.startswith('.'):
            sys.stderr.write("warning: path {0} name starts with '.' (skip)\n"
                             .format(new_plugin_path))
            continue
        try:
            do_install_plugin(env,
                              installed_plugins,
                              new_plugin_path,
                              force_install)
        except InstallError as e:
            sys.stderr.write(str(e) + '\n')
            return 1


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
