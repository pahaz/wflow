#!/usr/bin/env python3
# coding=utf-8
from __future__ import unicode_literals, print_function, absolute_import, \
    generators, with_statement, nested_scopes, division
from glob import glob
import os
import sys
import argparse

from wutil.env_stack import load_env_stack
from wutil.env_keys import PLATFORM_VENV_PATH_KEY, PLATFORM_PLUGINS_PATH_KEY, \
    PLATFORM_USERNAME_KEY, PLATFORM_DATA_PATH_KEY


__author__ = 'pahaz'
__version__ = '0.0.2'
CONFIG_FILENAME = __file__.split('-')[0] + '.ini'


def is_root_access():
    # Windows not support `geteuid`
    return os.geteuid() == 0


def main(argv):
    env = load_env_stack(CONFIG_FILENAME)

    platform_plugins_path = env[PLATFORM_PLUGINS_PATH_KEY]
    platform_data_path = env[PLATFORM_DATA_PATH_KEY]
    platform_venv_path = env[PLATFORM_VENV_PATH_KEY]
    platform_username = env[PLATFORM_USERNAME_KEY]

    parser = argparse.ArgumentParser(description="Plugin activate tool")
    parser.add_argument('plugins', nargs="*", metavar="plugin",
                        help="plugin names")

    if not is_root_access():
        sys.stderr.write("error: required root access "
                         "(use: `sudo {0}`)\n"
                         .format(' '.join(sys.argv[:])))
        return 4

    options = parser.parse_args(argv)
    plugins = options.plugins

    for plugin_name in plugins:
        path_pattern = os.path.join(platform_plugins_path, '.' + plugin_name)
        print('activate pattern: ' + plugin_name)
        for plugin_dir in glob(path_pattern):
            if not os.path.isdir(plugin_dir):
                continue
            base, name = os.path.split(plugin_dir)
            if not name.startswith('.'):
                print("plugin name not starts with '.' - skip")
                continue
            if name in ['.', '..']:
                continue
            new_name = os.path.join(base, name[1:])
            print("activate plugin '{0}'".format(name[1:]))
            try:
                os.rename(plugin_dir, new_name)
            except OSError as e:
                print('activate error: {0}'.format(e))
                return 1

    print("INSTALLED PLUGINS")
    y = [x for x in os.listdir(platform_plugins_path) if not x.startswith('.')]
    n = [x[1:] for x in os.listdir(platform_plugins_path) if x.startswith('.')]
    print("ACTIVATED: " + ', '.join(y))
    print('DEACTIVATED: ' + ', '.join(n))
    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
